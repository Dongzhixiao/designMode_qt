依赖倒转原则：抽象不应该依赖细节，细节应该依赖于抽象！即针对接口编程，不要对实现编程！
即：
A.高层模块不应该依赖低层模块。两个都应该依赖抽象；
B.抽象不应该依赖细节。细节应该依赖抽象。
依赖倒转其实是面向对象设计的标志，用哪种语言来编程不重要，如果编写时考虑的都是如何
针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都终止于抽象类或者接口，那就是
面向对象的设计，反之那就是过程化的设计了！

里氏代换原则：一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉
不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的
行为没有变化。
即：
子类型必须能够替换掉它们的父类型。
只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能正真被复用，而子类也
能够在父类的基础上增加新的行为。例如：
动物 animal = new 猫();   //需求变化，如将“猫”更换成“狗”，则后面都不需要改变！
animal.eat();
animal.drink();
animal.run();
animal.cry();
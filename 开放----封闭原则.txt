开放--封闭原则：软件实体(类、模块、函数等)应该可以扩展，但是不可以修改！
无论模块怎么封闭，都存在一些无法对之封闭的变化，因此设计人员必须对于他设计的模块应该
对哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些
变化！
当变化发生时，我们就创建一个抽象来隔离以后发生的同类变化！！即：面对需求，对程序的改
动是通过增加新代码进行的，而不是更改现有的代码。
开放--封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大
好处，也就是可维护、可扩展、可复用、灵活性好。开发人员应该仅对程序中呈现出频繁变化的
那些部分作出抽象，然而，对于应用程序中的每个部分刻意的进行抽象同样不是一个好主意。拒
绝不成熟的抽象和抽象本身一样重要。切记！切记！！
